#pragma once

#include <qua/type/export>

namespace qua
{
    namespace type
    {
        class QUA_TYPE_PUBLIC object
        {
        public:
            object();
            ~object();

            object(const object& another);
            object(object&& temporary);

            template <typename value_type>
            object(value_type value);

            template <typename value_type>
            operator value_type () const;

            template <typename value_type>
            void set(value_type value);

            template <typename value_type>
            value_type get() const;

            template <typename value_type>
            bool is() const;

            class data;

        protected:
            static const size_t data_size = 16;

        private:
            data* m_data;
            char m_buffer[data_size];
        };

        class QUA_TYPE_PUBLIC object::data
        {
        public:
            virtual ~data() { }
            virtual data* copy(char* to) const = 0;
            virtual data* move(char* to) = 0;
        };

        template <typename value_type>
        object::object(value_type value)
            : m_data()
        {
            set(value);
        }

        template <typename value_type>
        object::operator value_type () const
        {
            return get<value_type>();
        }
    }
}

// Unicode signature: Владимир Керимов
