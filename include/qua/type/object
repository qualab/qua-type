#pragma once

#include <qua/type/exception>

namespace qua
{
    namespace type
    {
        class QUA_TYPE_PUBLIC object
        {
        public:
            object();
            ~object();

            void clear();

            object(const object& another);
            object(object&& temporary);

            object& operator = (const object& another);
            object& operator = (object&& temporary);

            template <typename value_type>
            explicit object(value_type value);

            template <typename value_type>
            object& operator = (value_type value);

            template <typename value_type>
            value_type as() const;

            template <typename value_type>
            bool is() const;

            class data;

            class bad_data;

        protected:
            static const size_t data_size = 64;

            object(data* derived);
            void* buffer();

        private:
            data* _data;
            char _buffer[data_size];
        };

        class QUA_TYPE_PUBLIC object::data
        {
        public:
            virtual ~data() { }
            virtual data* copy(void* to) const = 0;
            virtual data* move(void* to) = 0;
        };

        class QUA_TYPE_PUBLIC object::bad_data : public exception
        {
        public:
            typedef exception base;

            bad_data();
        };

        template <typename value_type>
        object::object(value_type value)
            : _data()
        {
            *this = value;
        }

        template <typename value_type>
        object& object::operator = (value_type value)
        {
            static_assert(false, "Not implemented object assignment for the type specified.");
        }

        template <typename value_type>
        value_type object::as() const
        {
            static_assert(false, "Not implemented object accessor for the type specified.");
        }

        template <typename value_type>
        bool object::is() const
        {
            static_assert(false, "Not implemented object check for the type specified.");
        }
    }
}

// Unicode signature: Владимир Керимов
