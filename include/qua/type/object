#pragma once

#include <qua/type/export>
#include <cstdint>

namespace qua
{
    namespace type
    {
        class QUA_TYPE_PUBLIC object
        {
        public:
            object();
            ~object();

            object(const object& another);
            object(object&& temporary);

            object& operator = (const object& another);
            object& operator = (object&& temporary);

            void clear();

            template <typename value_type>
            object(value_type value);

            template <typename value_type>
            operator value_type () const;

            template <typename value_type>
            void set(value_type value);

            template <typename value_type>
            value_type get() const;

            template <typename value_type>
            bool is() const;

            template <typename value_type>
            bool is(value_type value) const;

            template <typename value_type>
            value_type cast() const;

            class data;

        protected:
            static const size_t data_size = 64;

            object(data* derived);
            void* buffer();

        private:
            data* _data;
            char _buffer[data_size];
        };

        class QUA_TYPE_PUBLIC object::data
        {
        public:
            virtual ~data() { }
            virtual data* copy(void* to) const = 0;
            virtual data* move(void* to) = 0;
        };

        template <typename value_type>
        object::object(value_type value)
            : _data()
        {
            set(value);
        }

        template <typename value_type>
        object::operator value_type () const
        {
            return get<value_type>();
        }

        template <> QUA_TYPE_PUBLIC bool object::get() const;
        template <> QUA_TYPE_PUBLIC std::int8_t object::get() const;
        template <> QUA_TYPE_PUBLIC std::int16_t object::get() const;
        template <> QUA_TYPE_PUBLIC std::int32_t object::get() const;
        template <> QUA_TYPE_PUBLIC std::int64_t object::get() const;
        template <> QUA_TYPE_PUBLIC std::uint8_t object::get() const;
        template <> QUA_TYPE_PUBLIC std::uint16_t object::get() const;
        template <> QUA_TYPE_PUBLIC std::uint32_t object::get() const;
        template <> QUA_TYPE_PUBLIC std::uint64_t object::get() const;
        template <> QUA_TYPE_PUBLIC float object::get() const;
        template <> QUA_TYPE_PUBLIC double object::get() const;

        template <> QUA_TYPE_PUBLIC void object::set(bool value);
        template <> QUA_TYPE_PUBLIC void object::set(std::int8_t value);
        template <> QUA_TYPE_PUBLIC void object::set(std::int16_t value);
        template <> QUA_TYPE_PUBLIC void object::set(std::int32_t value);
        template <> QUA_TYPE_PUBLIC void object::set(std::int64_t value);
        template <> QUA_TYPE_PUBLIC void object::set(std::uint8_t value);
        template <> QUA_TYPE_PUBLIC void object::set(std::uint16_t value);
        template <> QUA_TYPE_PUBLIC void object::set(std::uint32_t value);
        template <> QUA_TYPE_PUBLIC void object::set(std::uint64_t value);
        template <> QUA_TYPE_PUBLIC void object::set(float value);
        template <> QUA_TYPE_PUBLIC void object::set(double value);
        template <> QUA_TYPE_PUBLIC void object::set(std::nullptr_t);
    }
}

// Unicode signature: Владимир Керимов
